generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model PokerRoom {
  id       String  @id @default(cuid())
  userId   String
  nickname String?

  user    User     @relation(fields: [userId], references: [id])
  Round   Round[]
  players Player[]
}

model Player {
  id          Int     @id @default(autoincrement())
  cuid        String  @unique @default(cuid())
  name        String
  pokerRoomId String?
  isVoter     Boolean @default(true)
  isAdmin     Boolean @default(false)

  Vote      Vote[]
  pokerRoom PokerRoom? @relation(fields: [pokerRoomId], references: [id])
}

model Round {
  id         Int      @id @default(autoincrement())
  roomId     String
  isActive   Boolean  @default(true)
  name       String?
  createTime DateTime @default(now())

  room PokerRoom @relation(fields: [roomId], references: [id])
  Vote Vote[]
}

model Vote {
  id       Int      @id @default(autoincrement())
  roundId  Int
  playerId Int
  value    String
  time     DateTime @default(now())

  round  Round  @relation(fields: [roundId], references: [id])
  player Player @relation(fields: [playerId], references: [id])
}

// == Next Auth ==

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  PokerRoom     PokerRoom[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// == End Next Auth ==
